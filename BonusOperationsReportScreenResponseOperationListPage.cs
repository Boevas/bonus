/*
 * Bonus Operations API for MobileAplication
 *
 * This microservice allows you to receive information about transactions in the MKB bonus
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BonusOperationsReportScreenResponseOperationListPage : IEquatable<BonusOperationsReportScreenResponseOperationListPage>
    { 
        /// <summary>
        /// Заполнить поле title из одноименного поля объекта operationListPage из словаря в WoodSide - MKB_Bonus/ScreensModel.json
        /// </summary>
        /// <value>Заполнить поле title из одноименного поля объекта operationListPage из словаря в WoodSide - MKB_Bonus/ScreensModel.json</value>

        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Объект содержащий в себе динамические фильтры
        /// </summary>
        /// <value>Объект содержащий в себе динамические фильтры</value>

        [DataMember(Name="filters")]
        public List<BonusOperationsReportScreenResponseOperationListPageFilters> Filters { get; set; }

        /// <summary>
        /// Gets or Sets OperationsList
        /// </summary>

        [DataMember(Name="operationsList")]
        public List<ShortOperation> OperationsList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BonusOperationsReportScreenResponseOperationListPage {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  OperationsList: ").Append(OperationsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BonusOperationsReportScreenResponseOperationListPage)obj);
        }

        /// <summary>
        /// Returns true if BonusOperationsReportScreenResponseOperationListPage instances are equal
        /// </summary>
        /// <param name="other">Instance of BonusOperationsReportScreenResponseOperationListPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BonusOperationsReportScreenResponseOperationListPage other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Filters == other.Filters ||
                    Filters != null &&
                    Filters.SequenceEqual(other.Filters)
                ) && 
                (
                    OperationsList == other.OperationsList ||
                    OperationsList != null &&
                    OperationsList.SequenceEqual(other.OperationsList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Filters != null)
                    hashCode = hashCode * 59 + Filters.GetHashCode();
                    if (OperationsList != null)
                    hashCode = hashCode * 59 + OperationsList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BonusOperationsReportScreenResponseOperationListPage left, BonusOperationsReportScreenResponseOperationListPage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BonusOperationsReportScreenResponseOperationListPage left, BonusOperationsReportScreenResponseOperationListPage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
