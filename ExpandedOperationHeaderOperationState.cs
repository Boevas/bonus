/*
 * Bonus Operations API for MobileAplication
 *
 * This microservice allows you to receive information about transactions in the MKB bonus
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Объект содержащий информацию об авторизации операции
    /// </summary>
    [DataContract]
    public partial class ExpandedOperationHeaderOperationState : IEquatable<ExpandedOperationHeaderOperationState>
    { 
        /// <summary>
        /// Содержание данного поля зависит от значения поля \&quot;auth\&quot;, если значение false - \&quot;Операция в обработке\&quot;, иначе \&quot;Операция исполнена\&quot;
        /// </summary>
        /// <value>Содержание данного поля зависит от значения поля \&quot;auth\&quot;, если значение false - \&quot;Операция в обработке\&quot;, иначе \&quot;Операция исполнена\&quot;</value>

        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Заполянется значением поля \&quot;auth\&quot; ответа сервиса MKBO_GET_BONUS_OPERATION_MKBO2MCBBO
        /// </summary>
        /// <value>Заполянется значением поля \&quot;auth\&quot; ответа сервиса MKBO_GET_BONUS_OPERATION_MKBO2MCBBO</value>

        [DataMember(Name="auth")]
        public bool? Auth { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>

        [DataMember(Name="icon")]
        public ExpandedOperationHeaderOperationStateIcon Icon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpandedOperationHeaderOperationState {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExpandedOperationHeaderOperationState)obj);
        }

        /// <summary>
        /// Returns true if ExpandedOperationHeaderOperationState instances are equal
        /// </summary>
        /// <param name="other">Instance of ExpandedOperationHeaderOperationState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpandedOperationHeaderOperationState other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Auth == other.Auth ||
                    Auth != null &&
                    Auth.Equals(other.Auth)
                ) && 
                (
                    Icon == other.Icon ||
                    Icon != null &&
                    Icon.Equals(other.Icon)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Auth != null)
                    hashCode = hashCode * 59 + Auth.GetHashCode();
                    if (Icon != null)
                    hashCode = hashCode * 59 + Icon.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExpandedOperationHeaderOperationState left, ExpandedOperationHeaderOperationState right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExpandedOperationHeaderOperationState left, ExpandedOperationHeaderOperationState right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
