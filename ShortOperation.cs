/*
 * Bonus Operations API for MobileAplication
 *
 * This microservice allows you to receive information about transactions in the MKB bonus
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Объект описывающий операцию, для списка на странице отчета по МКБ бонус
    /// </summary>
    [DataContract]
    public partial class ShortOperation : IEquatable<ShortOperation>
    { 
        /// <summary>
        /// Заполняется значением парметра \&quot;operationID\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO
        /// </summary>
        /// <value>Заполняется значением парметра \&quot;operationID\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO</value>

        [DataMember(Name="operationID")]
        public string OperationID { get; set; }

        /// <summary>
        /// Заполняется значением парметра \&quot;transactionDate\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO
        /// </summary>
        /// <value>Заполняется значением парметра \&quot;transactionDate\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO</value>

        [DataMember(Name="transactionDate")]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Заполняется значением парметра \&quot;merchName\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO
        /// </summary>
        /// <value>Заполняется значением парметра \&quot;merchName\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO</value>

        [DataMember(Name="merchName")]
        public string MerchName { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>

        [DataMember(Name="icon")]
        public ShortOperationIcon Icon { get; set; }

        /// <summary>
        /// Заполняется значением парметра \&quot;auth\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO
        /// </summary>
        /// <value>Заполняется значением парметра \&quot;auth\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO</value>

        [DataMember(Name="auth")]
        public bool? Auth { get; set; }

        /// <summary>
        /// Заполняется значением парметра \&quot;enrollmentType\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO
        /// </summary>
        /// <value>Заполняется значением парметра \&quot;enrollmentType\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO</value>

        [DataMember(Name="enrollmentType")]
        public string EnrollmentType { get; set; }

        /// <summary>
        /// Заполняется значением парметра \&quot;bonusCategory.rate\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO
        /// </summary>
        /// <value>Заполняется значением парметра \&quot;bonusCategory.rate\&quot; из ответа сервиса MKBO_GET_BONUS_OPERATIONS_LIST_MKBO2MCBBO</value>

        [DataMember(Name="rate")]
        public int? Rate { get; set; }

        /// <summary>
        /// Gets or Sets AmountCard
        /// </summary>

        [DataMember(Name="amountCard")]
        public ShortOperationAmountCard AmountCard { get; set; }

        /// <summary>
        /// Gets or Sets BonusValue
        /// </summary>

        [DataMember(Name="bonusValue")]
        public ShortOperationBonusValue BonusValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShortOperation {\n");
            sb.Append("  OperationID: ").Append(OperationID).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  MerchName: ").Append(MerchName).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  EnrollmentType: ").Append(EnrollmentType).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  AmountCard: ").Append(AmountCard).Append("\n");
            sb.Append("  BonusValue: ").Append(BonusValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ShortOperation)obj);
        }

        /// <summary>
        /// Returns true if ShortOperation instances are equal
        /// </summary>
        /// <param name="other">Instance of ShortOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShortOperation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OperationID == other.OperationID ||
                    OperationID != null &&
                    OperationID.Equals(other.OperationID)
                ) && 
                (
                    TransactionDate == other.TransactionDate ||
                    TransactionDate != null &&
                    TransactionDate.Equals(other.TransactionDate)
                ) && 
                (
                    MerchName == other.MerchName ||
                    MerchName != null &&
                    MerchName.Equals(other.MerchName)
                ) && 
                (
                    Icon == other.Icon ||
                    Icon != null &&
                    Icon.Equals(other.Icon)
                ) && 
                (
                    Auth == other.Auth ||
                    Auth != null &&
                    Auth.Equals(other.Auth)
                ) && 
                (
                    EnrollmentType == other.EnrollmentType ||
                    EnrollmentType != null &&
                    EnrollmentType.Equals(other.EnrollmentType)
                ) && 
                (
                    Rate == other.Rate ||
                    Rate != null &&
                    Rate.Equals(other.Rate)
                ) && 
                (
                    AmountCard == other.AmountCard ||
                    AmountCard != null &&
                    AmountCard.Equals(other.AmountCard)
                ) && 
                (
                    BonusValue == other.BonusValue ||
                    BonusValue != null &&
                    BonusValue.Equals(other.BonusValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OperationID != null)
                    hashCode = hashCode * 59 + OperationID.GetHashCode();
                    if (TransactionDate != null)
                    hashCode = hashCode * 59 + TransactionDate.GetHashCode();
                    if (MerchName != null)
                    hashCode = hashCode * 59 + MerchName.GetHashCode();
                    if (Icon != null)
                    hashCode = hashCode * 59 + Icon.GetHashCode();
                    if (Auth != null)
                    hashCode = hashCode * 59 + Auth.GetHashCode();
                    if (EnrollmentType != null)
                    hashCode = hashCode * 59 + EnrollmentType.GetHashCode();
                    if (Rate != null)
                    hashCode = hashCode * 59 + Rate.GetHashCode();
                    if (AmountCard != null)
                    hashCode = hashCode * 59 + AmountCard.GetHashCode();
                    if (BonusValue != null)
                    hashCode = hashCode * 59 + BonusValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ShortOperation left, ShortOperation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ShortOperation left, ShortOperation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
