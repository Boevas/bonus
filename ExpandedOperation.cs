/*
 * Bonus Operations API for MobileAplication
 *
 * This microservice allows you to receive information about transactions in the MKB bonus
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Объект содержащий расширенную операцию об информации
    /// </summary>
    [DataContract]
    public partial class ExpandedOperation : IEquatable<ExpandedOperation>
    { 
        /// <summary>
        /// Заполянется значением поля \&quot;operationID\&quot; ответа сервиса MKBO_GET_BONUS_OPERATION_MKBO2MCBBO
        /// </summary>
        /// <value>Заполянется значением поля \&quot;operationID\&quot; ответа сервиса MKBO_GET_BONUS_OPERATION_MKBO2MCBBO</value>

        [DataMember(Name="operationID")]
        public string OperationID { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>

        [DataMember(Name="header")]
        public ExpandedOperationHeader Header { get; set; }

        /// <summary>
        /// Баннеры с ифнормацией дял клиента
        /// </summary>
        /// <value>Баннеры с ифнормацией дял клиента</value>

        [DataMember(Name="banners")]
        public List<ExpandedOperationBanners> Banners { get; set; }

        /// <summary>
        /// Массив кнпок, доступных для операции заполянетя из woodside
        /// </summary>
        /// <value>Массив кнпок, доступных для операции заполянетя из woodside</value>

        [DataMember(Name="buttons")]
        public List<ExpandedOperationButtons> Buttons { get; set; }

        /// <summary>
        /// Массив дополнительных параметров опреациии
        /// </summary>
        /// <value>Массив дополнительных параметров опреациии</value>

        [DataMember(Name="params")]
        public List<ExpandedOperationParams> _Params { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpandedOperation {\n");
            sb.Append("  OperationID: ").Append(OperationID).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Banners: ").Append(Banners).Append("\n");
            sb.Append("  Buttons: ").Append(Buttons).Append("\n");
            sb.Append("  _Params: ").Append(_Params).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExpandedOperation)obj);
        }

        /// <summary>
        /// Returns true if ExpandedOperation instances are equal
        /// </summary>
        /// <param name="other">Instance of ExpandedOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpandedOperation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OperationID == other.OperationID ||
                    OperationID != null &&
                    OperationID.Equals(other.OperationID)
                ) && 
                (
                    Header == other.Header ||
                    Header != null &&
                    Header.Equals(other.Header)
                ) && 
                (
                    Banners == other.Banners ||
                    Banners != null &&
                    Banners.SequenceEqual(other.Banners)
                ) && 
                (
                    Buttons == other.Buttons ||
                    Buttons != null &&
                    Buttons.SequenceEqual(other.Buttons)
                ) && 
                (
                    _Params == other._Params ||
                    _Params != null &&
                    _Params.SequenceEqual(other._Params)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OperationID != null)
                    hashCode = hashCode * 59 + OperationID.GetHashCode();
                    if (Header != null)
                    hashCode = hashCode * 59 + Header.GetHashCode();
                    if (Banners != null)
                    hashCode = hashCode * 59 + Banners.GetHashCode();
                    if (Buttons != null)
                    hashCode = hashCode * 59 + Buttons.GetHashCode();
                    if (_Params != null)
                    hashCode = hashCode * 59 + _Params.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExpandedOperation left, ExpandedOperation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExpandedOperation left, ExpandedOperation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
